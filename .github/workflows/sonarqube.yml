# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow helps you trigger a SonarQube analysis of your code and populates
# GitHub Code Scanning alerts with the vulnerabilities found.
# (this feature is available starting from SonarQube 9.7, Developer Edition and above)

# 1. Make sure you add a valid GitHub configuration to your SonarQube (Administration > DevOps platforms > GitHub)

# 2. Import your project on SonarQube
#     * Add your repository as a new project by clicking "Create project" from your homepage.
#
# 3. Select GitHub Actions as your CI and follow the tutorial
#     * a. Generate a new token and add it to your GitHub repository's secrets using the name SONAR_TOKEN
#          (On SonarQube, click on your avatar on top-right > My account > Security or ask your administrator)
#
#     * b. Copy/paste your SonarQube host URL to your GitHub repository's secrets using the name SONAR_HOST_URL
#
#     * c. Copy/paste the project Key into the args parameter below
#          (You'll find this information in SonarQube by following the tutorial or by clicking on Project Information at the top-right of your project's homepage)

# Feel free to take a look at our documentation (https://docs.sonarqube.org/latest/analysis/github-integration/)
# or reach out to our community forum if you need some help (https://community.sonarsource.com/c/sq/10)

name: SonarQube analysis

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  pull-requests: read

jobs:
  Analysis:
    runs-on: self-hosted
    # Ensure your self-hosted runner is Windows (the error came from a container action which is Linux-only).
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java (required by SonarScanner)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Download SonarScanner CLI
        shell: powershell
        run: |
          $ssUrl = 'https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-windows.zip'
          $zip = "${{ runner.temp }}\sonar-scanner.zip"
          Invoke-WebRequest -Uri $ssUrl -OutFile $zip
          Expand-Archive -Path $zip -DestinationPath "${{ runner.temp }}\sonar-scanner"
          Remove-Item $zip

      - name: Prepare SonarScanner environment
        shell: powershell
        run: |
          $scannerHome = "${{ runner.temp }}\sonar-scanner\sonar-scanner-4.8.0.2856-windows"
          # Set environment variable SONAR_SCANNER_HOME using the new GITHUB_ENV file
          Write-Output "SONAR_SCANNER_HOME=$scannerHome" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          # Add scanner bin to PATH using the new GITHUB_PATH file
          $binPath = Join-Path $scannerHome 'bin'
          Write-Output $binPath | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Run SonarScanner (backend)
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          JAVA_HOME: ${{ env.JAVA_HOME }}
        shell: powershell
        run: |
          $projectKey = '${{ secrets.SONAR_PROJECT_KEY }}'
          if (-not $projectKey) { Write-Host 'SONAR_PROJECT_KEY secret not set. Set repository secret SONAR_PROJECT_KEY.'; exit 1 }
          if (-not $env:SONAR_SCANNER_HOME) { Write-Host 'SONAR_SCANNER_HOME is not set'; exit 1 }
          # Debug
          Write-Host "Backend analysis - Effective JAVA_HOME: $env:JAVA_HOME"
          try { & java -version } catch { Write-Host "java not in PATH: $_" }
          try { & "$env:JAVA_HOME\bin\java" -version } catch { Write-Host "java from JAVA_HOME failed: $_" }
          if ($env:JAVA_HOME) { $env:PATH = "$env:JAVA_HOME\bin;" + $env:PATH }
          $javaExe = Join-Path $env:JAVA_HOME 'bin\java'
          $libCp = "$env:SONAR_SCANNER_HOME\lib\*"
          $args = @(
            "-Dsonar.host.url=$env:SONAR_HOST_URL",
            "-Dsonar.login=$env:SONAR_TOKEN",
            "-Dsonar.projectKey=$projectKey",
            "-Dsonar.projectBaseDir=backend",
            "-Dsonar.sources=.",
            "-Dsonar.exclusions=**/node_modules/**,**/dependency-check-bin/**,**/dependency-check-reports/**,**/blockChain/**,**/*.sql,**/*.zip,**/*.min.js,**/*.map,**/*.png,**/*.jpg,**/*.jpeg,**/*.gif,**/*.svg,**/*.ico,**/*.lock,**/package-lock.json,**/.git/**"
          )
          Write-Host "Invoking scanner for backend via: $javaExe -cp $libCp org.sonarsource.scanner.cli.Main"
          & $javaExe -cp $libCp org.sonarsource.scanner.cli.Main @args

      - name: Run SonarScanner (frontend)
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          JAVA_HOME: ${{ env.JAVA_HOME }}
        shell: powershell
        run: |
          $projectKey = '${{ secrets.SONAR_PROJECT_KEY }}'
          if (-not $projectKey) { Write-Host 'SONAR_PROJECT_KEY secret not set. Set repository secret SONAR_PROJECT_KEY.'; exit 1 }
          if (-not $env:SONAR_SCANNER_HOME) { Write-Host 'SONAR_SCANNER_HOME is not set'; exit 1 }
          # Debug
          Write-Host "Frontend analysis - Effective JAVA_HOME: $env:JAVA_HOME"
          try { & java -version } catch { Write-Host "java not in PATH: $_" }
          try { & "$env:JAVA_HOME\bin\java" -version } catch { Write-Host "java from JAVA_HOME failed: $_" }
          if ($env:JAVA_HOME) { $env:PATH = "$env:JAVA_HOME\bin;" + $env:PATH }
          $javaExe = Join-Path $env:JAVA_HOME 'bin\java'
          $libCp = "$env:SONAR_SCANNER_HOME\lib\*"
          # For frontend, analyze only src/ (react app) and ignore node_modules, public assets, build outputs
          $args = @(
            "-Dsonar.host.url=$env:SONAR_HOST_URL",
            "-Dsonar.login=$env:SONAR_TOKEN",
            "-Dsonar.projectKey=$projectKey",
            "-Dsonar.projectBaseDir=frontend",
            "-Dsonar.sources=src",
            "-Dsonar.exclusions=**/node_modules/**,public/**,**/*.png,**/*.jpg,**/*.jpeg,**/*.gif,**/*.svg,**/*.ico,**/*.map,**/*.min.js,**/dist/**,**/build/**,**/package-lock.json,**/.git/**"
          )
          Write-Host "Invoking scanner for frontend via: $javaExe -cp $libCp org.sonarsource.scanner.cli.Main"
          & $javaExe -cp $libCp org.sonarsource.scanner.cli.Main @args

      - name: Done
        run: echo "SonarQube analysis completed"
